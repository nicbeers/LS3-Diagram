<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Interactive LS3 Diagram</title>
<style>
  :root{
    --bg:#071018; --card:#0b1220; --accent:#0bbf6c; --muted:#9aa6b2;
    --glass: rgba(255,255,255,0.04);
    --panel-bg: rgba(10,14,18,0.95);
  }
  html,body{height:100%;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;color:#e6eef3;background:
    linear-gradient(180deg,#071018 0%, #071a1f 100%);}
  .wrap{max-width:1100px;margin:12px auto;padding:10px;display:grid;grid-template-columns:1fr;gap:10px;}
  header{display:flex;align-items:center;justify-content:space-between;gap:12px}
  h1{font-size:16px;margin:0}
  .card{background:var(--card);padding:10px;border-radius:12px;box-shadow:0 8px 30px rgba(0,0,0,0.6)}
  .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
  .controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  label{font-size:13px;color:var(--muted)}
  input[type=range]{height:28px}
  button{background:var(--glass);border:0;padding:8px 10px;border-radius:8px;color:#dff6ea;font-weight:600}
  button.active{background:linear-gradient(90deg,#083 0%, #0b6 100%);color:#042}
  #canvasWrap{display:flex;gap:12px;align-items:flex-start;flex-wrap:wrap}
  /* left: svg area; right: info panel */
  .svgWrap{flex:1;min-width:280px}
  .infoPanel{width:320px;min-width:240px;max-width:380px;box-sizing:border-box}
  .infoHeader{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
  .infoTitle{font-size:15px;margin:0}
  .infoBody{font-size:13px;color:var(--muted);line-height:1.4}
  .labelBadge{font-size:12px;background:rgba(255,255,255,0.04);padding:6px;border-radius:8px;display:inline-block;margin:4px 0}
  /* SVG styling */
  svg{width:100%;height:auto;border-radius:10px;background:linear-gradient(180deg,#021018,#031a1f);display:block}
  .part{cursor:pointer;transition:transform .12s, filter .12s}
  .part:active{transform:scale(.98)}
  .part.hover{filter:drop-shadow(0 6px 12px rgba(0,200,120,0.12))}
  .highlight{stroke:rgba(11,191,108,0.95);stroke-width:2;filter:drop-shadow(0 8px 24px rgba(11,191,108,0.12))}
  .labelText{font-size:12px;fill:#cdeee0;font-weight:700;pointer-events:none;text-shadow: 0 1px 0 rgba(0,0,0,0.6)}
  .small{font-size:12px;color:var(--muted)}
  footer{font-size:12px;color:var(--muted);text-align:center;margin-top:6px}
  @media(min-width:900px){ .wrap{grid-template-columns:1fr;} .svgWrap{max-width:720px} }
  /* Make touch targets bigger */
  .touchTarget{touch-action:manipulation}
</style>
</head>
<body>
  <div class="wrap">
    <header class="card">
      <div>
        <h1>Interactive LS3 â€” engine diagram</h1>
        <div class="small">Tap parts to learn. Use the RPM slider to animate the crank & pistons.</div>
      </div>
      <div class="controls">
        <label>RPM <span id="rpmValue">900</span> rpm</label>
        <input id="rpm" type="range" min="0" max="7000" step="10" value="900" style="width:220px">
        <button id="playBtn" class="active">Animating</button>
        <button id="labelsBtn">Hide Labels</button>
      </div>
    </header>

    <div id="canvasWrap" class="card">
      <div class="svgWrap">
        <!-- SVG simplified V8, with groups for parts to animate or highlight -->
        <svg id="svg" viewBox="0 0 1200 700" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="LS3 engine diagram">
          <defs>
            <linearGradient id="metalG" x1="0" x2="1">
              <stop offset="0" stop-color="#dfe6ea" stop-opacity="0.08"/>
              <stop offset="1" stop-color="#aab6bd" stop-opacity="0.06"/>
            </linearGradient>
          </defs>

          <!-- background plate -->
          <rect x="0" y="0" width="1200" height="700" fill="none" />

          <!-- Intake manifold (center top) -->
          <g id="intake" class="part touchTarget" transform="translate(300,70)">
            <rect x="0" y="0" width="600" height="90" rx="18" fill="#2b3b4a"/>
            <rect x="18" y="12" width="564" height="66" rx="10" fill="#16324a"/>
            <text x="300" y="50" class="labelText" text-anchor="middle">Intake Manifold</text>
          </g>

          <!-- Throttle body -->
          <g id="throttle" class="part touchTarget" transform="translate(920,90)">
            <ellipse cx="0" cy="0" rx="40" ry="26" fill="#4a5a66"/>
            <text x="56" y="6" class="labelText" >Throttle Body</text>
          </g>

          <!-- Valve covers / heads left-->
          <g id="head_left" class="part touchTarget" transform="translate(140,170)">
            <rect x="0" y="0" width="240" height="100" rx="16" fill="#2c3942"/>
            <text x="120" y="58" class="labelText" text-anchor="middle">Cylinder Head & Valve Cover</text>
          </g>

          <!-- Valve covers / heads right-->
          <g id="head_right" class="part touchTarget" transform="translate(820,170)">
            <rect x="0" y="0" width="240" height="100" rx="16" fill="#2c3942"/>
            <text x="120" y="58" class="labelText" text-anchor="middle">Cylinder Head & Valve Cover</text>
          </g>

          <!-- Spark plugs (as small circles) left -->
          <g id="spark_left" class="part touchTarget" transform="translate(170,200)">
            <g transform="translate(20,8)">
              <circle cx="0" cy="0" r="6" fill="#fff7d6" stroke="#d3c38f"/>
              <text x="40" y="6" class="labelText">Spark Plug</text>
            </g>
          </g>

          <!-- spark right -->
          <g id="spark_right" class="part touchTarget" transform="translate(900,200)">
            <g transform="translate(20,8)">
              <circle cx="0" cy="0" r="6" fill="#fff7d6" stroke="#d3c38f"/>
            </g>
          </g>

          <!-- Cylinder banks & pistons (left bank: cylinders 1,3,5,7; right: 2,4,6,8) -->
          <g id="left_bank" transform="translate(180,310)">
            <!-- four cylinder assemblies stacked -->
            <!-- We'll create groups for pistons and connecting rods to animate -->
            <!-- Cylinder 1 (top) -->
            <g id="cyl_L1" transform="translate(0,0)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd" />
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 1</text>
            </g>

            <g id="cyl_L2" transform="translate(0,125)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd" />
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 3</text>
            </g>

            <g id="cyl_L3" transform="translate(0,250)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd" />
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 5</text>
            </g>

            <g id="cyl_L4" transform="translate(0,375)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd" />
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 7</text>
            </g>
          </g>

          <g id="right_bank" transform="translate(820,310)">
            <g id="cyl_R1" transform="translate(0,0)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd"/>
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 2</text>
            </g>

            <g id="cyl_R2" transform="translate(0,125)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd"/>
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 4</text>
            </g>

            <g id="cyl_R3" transform="translate(0,250)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd"/>
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 6</text>
            </g>

            <g id="cyl_R4" transform="translate(0,375)">
              <rect x="0" y="0" width="100" height="110" rx="10" fill="#1b2a33"/>
              <rect class="piston" x="8" y="20" width="84" height="40" rx="6" fill="#bdbdbd"/>
              <rect class="conrod" x="48" y="60" width="6" height="60" fill="#8b6f4d" transform-origin="51 60"/>
              <text x="110" y="55" class="labelText">Piston 8</text>
            </g>
          </g>

          <!-- Crankshaft (bottom center) -->
          <g id="crank" transform="translate(580,590)">
            <rect x="-360" y="-18" width="720" height="36" rx="18" fill="#4b3c36"/>
            <g id="crankshaft" transform="translate(0,0)">
              <circle cx="0" cy="0" r="36" fill="#7b6253" />
              <text x="0" y="6" class="labelText" text-anchor="middle">Crankshaft</text>
            </g>
          </g>

          <!-- Oil pan -->
          <g id="oilpan" class="part touchTarget" transform="translate(420,640)">
            <rect x="0" y="0" width="360" height="40" rx="8" fill="#162025"/>
            <text x="180" y="26" class="labelText" text-anchor="middle">Oil Pan</text>
          </g>

          <!-- small overlay label group (initially visible) -->
          <g id="labelsGroup"></g>

        </svg>
      </div>

      <div class="infoPanel card">
        <div class="infoHeader">
          <div>
            <h3 class="infoTitle" id="infoTitle">Tap a part</h3>
            <div class="small" id="infoSubtitle">Short descriptions appear here.</div>
          </div>
          <div>
            <div class="labelBadge" id="componentBadge">LS3</div>
          </div>
        </div>

        <div class="infoBody" id="infoBody">
          This interactive diagram highlights key LS3 components and animates crank & piston movement. Tap any labeled part to see details and usage notes.
        </div>

        <hr style="margin:10px 0;border:0;height:1px;background:rgba(255,255,255,0.03)" />

        <div>
          <div class="small" style="margin-bottom:6px"><strong>Quick controls</strong></div>
          <div class="small">Toggle labels: show/hide the small on-diagram text labels.</div>
          <div class="small">Animating: crank/pistons animate based on RPM slider.</div>
        </div>
      </div>
    </div>

    <footer class="card">
      <div class="small">Tip: open this in Safari on your iPhone and Add to Home Screen for quick access.</div>
    </footer>
  </div>

<script>
/* Interactive LS3 diagram script
   - Animates crank rotation and piston vertical position based on RPM.
   - Click/tap any .part to display info in the right panel.
   - Toggle labels and play/pause animation.
*/

// --- Part descriptions (short, factual) ---
const PART_INFO = {
  intake: {
    title: 'Intake Manifold',
    subtitle: 'Directs air to cylinders',
    body: 'The intake manifold distributes the air (and fuel in older systems) to each cylinder. LS3 uses a high-flow intake to help breathing at high RPM.'
  },
  throttle: {
    title: 'Throttle Body',
    subtitle: 'Controls incoming airflow',
    body: 'The throttle body regulates how much air enters the intake. On drive-by-wire cars, it is actuated by electronics rather than a cable.'
  },
  head_left: {
    title: 'Cylinder Head & Valve Cover (left bank)',
    subtitle: 'Houses valves & cam-related parts',
    body: 'The cylinder head contains the intake and exhaust ports, valves, valve seats, and guides. The LS3 head is a high-flow rectangular-port design.'
  },
  head_right: {
    title: 'Cylinder Head & Valve Cover (right bank)',
    subtitle: 'Houses valves & cam-related parts',
    body: 'Same as left bank â€” the LS3 is a V8 with two heads; they are mirror images that contain the valvetrain and combustion chamber.'
  },
  spark_left: {
    title: 'Spark Plugs',
    subtitle: 'Ignites the air/fuel mix',
    body: 'Spark plugs provide the ignition spark. LS3 uses coil-on-plug ignition â€” each plug has its own coil for reliable high-RPM performance.'
  },
  spark_right: { title: 'Spark Plugs', subtitle: 'Ignites the air/fuel mix', body: 'Spark plugs provide the ignition spark. LS3 uses coil-on-plug ignition.' },
  left_bank: { title: 'Left Cylinder Bank', subtitle: 'Cylinders 1,3,5,7', body: 'This bank contains four cylinders and their pistons. In a V8, banks fire in a specific order for balance and performance.' },
  right_bank: { title: 'Right Cylinder Bank', subtitle: 'Cylinders 2,4,6,8', body: 'The opposite bank contains the other four cylinders â€” together they form the V8 configuration.' },
  crank: { title: 'Crankshaft', subtitle: 'Converts piston motion to rotation', body: 'The crankshaft converts reciprocating piston movement into rotational power that goes to the transmission. LS3 uses a robust forged crank in some configurations.' },
  oilpan: { title: 'Oil Pan', subtitle: 'Holds engine oil', body: 'The oil pan stores lubricant and helps route oil through the pickup to the pump. For swaps, pan shape matters for crossmember clearance.' },
  cyl_L1: { title: 'Piston & Connecting Rod (L1)', subtitle: 'Piston 1', body: 'Pistons move up and down to compress the mixture. The connecting rod links piston to crank journal.' },
  cyl_L2: { title: 'Piston & Connecting Rod (L2)', subtitle: 'Piston 3', body: 'See piston 1 description.' },
  cyl_L3: { title: 'Piston & Connecting Rod (L3)', subtitle: 'Piston 5', body: 'See piston 1 description.' },
  cyl_L4: { title: 'Piston & Connecting Rod (L4)', subtitle: 'Piston 7', body: 'See piston 1 description.' },
  cyl_R1: { title: 'Piston & Connecting Rod (R1)', subtitle: 'Piston 2', body: 'See piston 1 description.' },
  cyl_R2: { title: 'Piston & Connecting Rod (R2)', subtitle: 'Piston 4', body: 'See piston 1 description.' },
  cyl_R3: { title: 'Piston & Connecting Rod (R3)', subtitle: 'Piston 6', body: 'See piston 1 description.' },
  cyl_R4: { title: 'Piston & Connecting Rod (R4)', subtitle: 'Piston 8', body: 'See piston 1 description.' },
};

// --- DOM references ---
const svg = document.getElementById('svg');
const infoTitle = document.getElementById('infoTitle');
const infoSubtitle = document.getElementById('infoSubtitle');
const infoBody = document.getElementById('infoBody');
const rpmSlider = document.getElementById('rpm');
const rpmValue = document.getElementById('rpmValue');
const playBtn = document.getElementById('playBtn');
const labelsBtn = document.getElementById('labelsBtn');
const labelsGroup = document.getElementById('labelsGroup');

// animation state
let animating = true;
let labelsVisible = true;
let rpm = Number(rpmSlider.value);

// map piston groups and initial positions
const pistonGroups = [
  { id: 'cyl_L1', bank: 'L', index: 0 }, { id: 'cyl_L2', bank: 'L', index: 2 },
  { id: 'cyl_L3', bank: 'L', index: 4 }, { id: 'cyl_L4', bank: 'L', index: 6 },
  { id: 'cyl_R1', bank: 'R', index: 1 }, { id: 'cyl_R2', bank: 'R', index: 3 },
  { id: 'cyl_R3', bank: 'R', index: 5 }, { id: 'cyl_R4', bank: 'R', index: 7 }
];

// helper: display info for a part id
function showInfo(partId){
  const info = PART_INFO[partId];
  if(info){
    infoTitle.textContent = info.title;
    infoSubtitle.textContent = info.subtitle || '';
    infoBody.textContent = info.body || '';
  } else {
    infoTitle.textContent = 'Unknown part';
    infoSubtitle.textContent = '';
    infoBody.textContent = 'No information available for this item.';
  }
  // visual feedback: highlight the clicked part
  clearHighlights();
  const el = document.getElementById(partId);
  if(el){
    el.classList.add('highlight');
  }
}

function clearHighlights(){
  document.querySelectorAll('.highlight').forEach(n=>n.classList.remove('highlight'));
}

// wire up tap/click for interactive parts
document.querySelectorAll('.part, #left_bank > g, #right_bank > g').forEach(el=>{
  // ensure each interactive sub-group has an id
  const id = el.id || (el.closest && el.closest('g')?.id) || null;
  el.style.touchAction = 'manipulation';
  el.addEventListener('click', (e)=>{
    e.stopPropagation();
    const targetId = el.id || el.parentElement?.id;
    showInfo(targetId);
  }, {passive:true});
});

// Clicking blank area clears selection
svg.addEventListener('click', (e)=>{
  if(e.target === svg) {
    clearHighlights();
    infoTitle.textContent = 'Tap a part';
    infoSubtitle.textContent = 'Short descriptions appear here.';
    infoBody.textContent = 'This interactive diagram highlights key LS3 components and animates crank & piston movement. Tap any labeled part to see details and usage notes.';
  }
});

// Show/hide labels implementation (generates simple text labels near parts)
function buildLabels(){
  labelsGroup.innerHTML = '';
  const labels = [
    {id:'intake', x:600, y:90, text:'Intake Manifold'},
    {id:'throttle', x:980, y:92, text:'Throttle Body'},
    {id:'head_left', x:260, y:210, text:'Head / Valve Cover'},
    {id:'head_right', x:960, y:210, text:'Head / Valve Cover'},
    {id:'crank', x:580, y:540, text:'Crankshaft'},
    {id:'oilpan', x:600, y:660, text:'Oil Pan'}
  ];
  labels.forEach(l=>{
    const g = document.createElementNS('http://www.w3.org/2000/svg','g');
    g.setAttribute('transform', `translate(${l.x-40}, ${l.y-12})`);
    const rect = document.createElementNS('http://www.w3.org/2000/svg','rect');
    rect.setAttribute('x',0); rect.setAttribute('y',0); rect.setAttribute('width',140); rect.setAttribute('height',24);
    rect.setAttribute('rx',6); rect.setAttribute('fill','rgba(0,0,0,0.45)');
    const text = document.createElementNS('http://www.w3.org/2000/svg','text');
    text.setAttribute('x',70); text.setAttribute('y',16); text.setAttribute('text-anchor','middle');
    text.setAttribute('class','labelText');
    text.textContent = l.text;
    g.appendChild(rect); g.appendChild(text);
    g.addEventListener('click', ()=>showInfo(l.id), {passive:true});
    labelsGroup.appendChild(g);
  });
}
buildLabels();

// Label toggle control
labelsBtn.addEventListener('click', ()=>{
  labelsVisible = !labelsVisible;
  labelsGroup.style.display = labelsVisible ? 'block' : 'none';
  labelsBtn.textContent = labelsVisible ? 'Hide Labels' : 'Show Labels';
});

// Play/pause
playBtn.addEventListener('click', ()=>{
  animating = !animating;
  playBtn.classList.toggle('active', animating);
  playBtn.textContent = animating ? 'Animating' : 'Paused';
});

// RPM slider
rpmSlider.addEventListener('input', ()=>{
  rpm = Number(rpmSlider.value);
  rpmValue.textContent = rpm;
});

// --- Animation math ---
// We'll animate crank angle with a smooth physics-like progression that depends on RPM.
// rpm (rev/min) => rev/sec = rpm/60 => rad/sec = (rpm/60)*2Ï€
let lastTime = null;
let crankAngle = 0; // radians

// Piston motion approximation: translate based on crank rotation angle and crank radius
// We'll compute each piston phase based on a typical V8 firing order phasing by indexes.
// For a simple visual, use index mapping and phase offsets.

const crankGroup = document.getElementById('crankshaft') || document.getElementById('crank');
const crankWhole = document.getElementById('crank');

// piston mapping: indices 0..7 correspond to firing/order phasing. We'll give each piston a phase offset
// to simulate V8 crank throws: in a cross-plane V8 the firing order has offsets; we'll approximate with 180deg alternation
const pistonPhaseOffsets = [0, Math.PI, Math.PI/2, Math.PI + Math.PI/2, Math.PI/4, Math.PI + Math.PI/4, Math.PI*3/4, Math.PI + Math.PI*3/4];

// find piston rects and conrods
const pistons = pistonGroups.map(p=>{
  const g = document.getElementById(p.id);
  if(!g) return null;
  const pistonRect = g.querySelector('.piston');
  const conrod = g.querySelector('.conrod');
  // save original y for baseline
  return { id: p.id, node: g, piston: pistonRect, conrod: conrod, phase: pistonPhaseOffsets[p.index] };
}).filter(Boolean);

// geometry constants for visual stroke
const crankRadius = 40; // px - visually how much piston moves
const pistonTravel = 48; // how many px piston moves up/down between TDC and BDC
const baselineOffsets = {}; // store original y values to transform around

pistons.forEach(p => {
  // read current piston y (the 'y' attribute)
  const y = Number(p.piston.getAttribute('y'));
  baselineOffsets[p.id] = y;
});

// animation loop
function animate(time){
  if(!lastTime) lastTime = time;
  const dt = (time - lastTime) / 1000; // seconds elapsed
  lastTime = time;

  // compute target angular velocity from rpm
  // RPM -> revolutions per second:
  const revPerSec = rpm / 60;
  const omega = revPerSec * 2 * Math.PI; // rad/sec

  // integrate crankAngle
  if(animating){
    crankAngle += omega * dt;
    // keep angle bounded
    if(crankAngle > 1e9) crankAngle = crankAngle % (2*Math.PI);
  }

  // rotate crank visual (wrap in degrees)
  const deg = (crankAngle * 180 / Math.PI) % 360;
  if(crankWhole) crankWhole.setAttribute('transform', `translate(580,590) rotate(${deg})`);
  if(crankGroup) crankGroup.setAttribute('transform', `rotate(${deg})`);

  // animate pistons: simple sinusoidal travel with phase offsets
  pistons.forEach(p=>{
    // piston position = baseline + amplitude * cos(angle + phase)
    const pos = baselineOffsets[p.id] + ( - (pistonTravel/2) * (Math.cos(crankAngle + p.phase)) );
    p.piston.setAttribute('y', pos.toString());
    // Slight tilt of conrod: rotate a little based on piston position
    const tilt = 12 * Math.sin(crankAngle + p.phase);
    if(p.conrod) p.conrod.setAttribute('transform', `rotate(${tilt} 51 60)`);
  });

  // continuous loop
  requestAnimationFrame(animate);
}
requestAnimationFrame(animate);

// Improve touch behavior: enlarge part on touchstart for feedback
document.querySelectorAll('.part').forEach(el=>{
  el.addEventListener('touchstart', ()=>el.classList.add('hover'), {passive:true});
  el.addEventListener('touchend', ()=>el.classList.remove('hover'), {passive:true});
  el.addEventListener('mouseenter', ()=>el.classList.add('hover'));
  el.addEventListener('mouseleave', ()=>el.classList.remove('hover'));
});

// initial UI sync
rpmValue.textContent = rpmSlider.value;
labelsGroup.style.display = labelsVisible ? 'block' : 'none';
playBtn.classList.toggle('active', animating);

/* Accessibility note:
   - SVG elements have visible text labels and respond to touch/click.
   - You can add ARIA attributes or further keyboard handlers if you plan to use this on desktop with keyboard nav.
*/

// End of script
</script>
</body>
</html>
